{"version":3,"sources":["components/TodoForm/index.js","components/TodoList/index.js","App.js","serviceWorker.js","index.js"],"names":["listPriority","TodoForm","props","onSubmit","onUpdate","todo","useState","taskName","setTaskName","desc","setDesc","moment","format","dueDate","setDueDate","priority","setPriority","useEffect","name","description","due_date","e","preventDefault","payload","className","placeholder","type","required","value","onChange","target","min","map","item","index","key","TodoList","todos","isSearch","onDelete","onDeleteBulk","onSeach","checkedItems","setCheckedItems","idSelected","setIdSelected","searchValue","setSearchValue","handleChange","temp","findIndex","push","splice","onUpdateTodo","id","hidden","htmlFor","onClick","length","disabled","App","setTodos","setIsSearch","currentTodos","localStorage","getItem","JSON","parse","localTodos","handleSearch","debounce","tempTodos","filter","toLowerCase","includes","Date","getTime","setItem","stringify","sort","a","b","handleSortTodos","newTodos","listId","forEach","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a24d803f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\n\nconst listPriority = [\"low\", \"normal\", \"high\"];\n\nexport default function TodoForm(props) {\n  const { onSubmit, onUpdate, todo } = props;\n  const [taskName, setTaskName] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [dueDate, setDueDate] = useState(moment().format(\"YYYY-MM-DD\"));\n  const [priority, setPriority] = useState(\"normal\");\n\n  useEffect(() => {\n    if (todo) {\n      setTaskName(todo.name);\n      setDesc(todo.description);\n      setDueDate(todo.due_date);\n      setPriority(todo.priority);\n    }\n  }, [todo]);\n\n  const handleChangeTaskName = (e) => {\n    setTaskName(e.target.value);\n  };\n\n  const handleChangeDesc = (e) => {\n    setDesc(e.target.value);\n  };\n\n  const handleChangeDueDate = (e) => {\n    setDueDate(e.target.value);\n  };\n\n  const handleChangePriority = (e) => {\n    setPriority(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const payload = {\n      name: taskName,\n      description: desc,\n      due_date: dueDate,\n      priority: priority,\n    };\n\n    if (todo) {\n      onUpdate(payload);\n    } else {\n      onSubmit(payload);\n    }\n\n    setTaskName(\"\");\n    setDesc(\"\");\n    setDueDate(moment().format(\"YYYY-MM-DD\"));\n    setPriority(\"normal\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-control__wrap\">\n        <input\n          placeholder=\"Add new task ...\"\n          type=\"string\"\n          required\n          value={taskName}\n          onChange={handleChangeTaskName}\n        />\n      </div>\n\n      <div className=\"form-control__wrap\">\n        <label>Description</label>\n        <textarea value={desc} onChange={handleChangeDesc} />\n      </div>\n\n      <div className=\"form-row\">\n        <div className=\"form-row--left\">\n          <div className=\"form-control__wrap\">\n            <label>Due date</label>\n            <input\n              type=\"date\"\n              required\n              min={moment().format(\"YYYY-MM-DD\")}\n              value={dueDate}\n              onChange={handleChangeDueDate}\n            />\n          </div>\n        </div>\n\n        <div className=\"form-row--right\">\n          <div className=\"form-control__wrap\">\n            <label>Priority</label>\n            <select value={priority} onChange={handleChangePriority}>\n              {listPriority.map((item, index) => (\n                <option key={index} value={item}>\n                  {item}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <button className=\"btn btn--block btn--success\">\n        {todo ? \"Update\" : \"Add\"}\n      </button>\n    </form>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport TodoForm from \"../TodoForm\";\n\nexport default function TodoList(props) {\n  const { todos, isSearch, onDelete, onUpdate, onDeleteBulk, onSeach } = props;\n  const [checkedItems, setCheckedItems] = useState([]);\n  const [idSelected, setIdSelected] = useState(\"\");\n  const [searchValue, setSearchValue] = useState('');\n\n  useEffect(() => {\n    if (!isSearch) {\n      setSearchValue('')\n    }\n  }, [isSearch])\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    const temp = [...checkedItems];\n    const index = temp.findIndex((item) => item === value);\n\n    if (index === -1) {\n      temp.push(value);\n    } else {\n      temp.splice(index, 1);\n    }\n\n    setCheckedItems(temp);\n  };\n\n  const handleChangeIdSelected = (id) => {\n    setIdSelected(id !== idSelected ? id : \"\");\n  };\n\n  const onUpdateTodo = (payload) => {\n    onUpdate({\n      ...payload,\n      id: idSelected\n    });\n    setIdSelected(\"\");\n  };\n\n  const handleDeleteBulk = () => {\n    onDeleteBulk(checkedItems)\n    setCheckedItems([])\n  }\n\n  const handleChangeSearch = (e) => {\n    onSeach(e.target.value)\n    setSearchValue(e.target.value)\n  }\n\n  return (\n    <div>\n      <div className=\"form-control__wrap\">\n        <input\n            placeholder=\"Search ...\"\n            type=\"string\"\n            required\n            value={searchValue}\n            onChange={handleChangeSearch}\n          />\n      </div>\n\n      <ul className=\"todo__list\">\n        {todos.map((todo) => (\n          <li className=\"todo__item\" key={todo.id}>\n            <div className=\"d-sm-flex align-items-center justify-content-between\">\n              <div className=\"d-flex align-items-center\">\n                <div className=\"checkbox-custom\">\n                  <input\n                    hidden\n                    type=\"checkbox\"\n                    id={todo.id}\n                    value={todo.id}\n                    onChange={handleChange}\n                  />\n                  <label htmlFor={todo.id}>checkbox</label>\n                </div>\n                <div>{todo.name}</div>\n              </div>\n              <div className=\"todo__item-action\">\n                <button\n                  className=\"btn btn--primary mr-10\"\n                  onClick={() => handleChangeIdSelected(todo.id)}\n                >\n                  Detail\n                </button>\n                <button\n                  className=\"btn btn--danger\"\n                  onClick={() => onDelete(todo.id)}\n                >\n                  Remove\n                </button>\n              </div>\n            </div>\n\n            {idSelected === todo.id && (\n              <TodoForm\n                todo={todo}\n                onSubmit={() => {}}\n                onUpdate={onUpdateTodo}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n\n      {!!checkedItems.length && (\n        <div className=\"d-flex align-items-center justify-content-between bulk-action__wrap\">\n          <div>Bulk Action</div>\n\n          <div>\n            <button className=\"btn btn--primary mr-10\" disabled>\n              Done\n            </button>\n            <button className=\"btn btn--danger\" onClick={() => handleDeleteBulk()}>Remove</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport debounce from \"lodash/debounce\";\n\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [isSearch, setIsSearch] = useState(false);\n\n  useEffect(() => {\n    const currentTodos = localStorage.getItem(\"todos\");\n\n    if (currentTodos) {\n      setTodos(JSON.parse(currentTodos));\n    }\n  }, []);\n\n  const localTodos = () => {\n    const localTodos = localStorage.getItem(\"todos\");\n\n    if (localTodos) {\n      return JSON.parse(localTodos);\n    }\n\n    return []\n  };\n\n  const handleAddTask = (payload) => {\n    const id = new Date().getTime();\n    const tempTodos = [...localTodos()];\n\n    tempTodos.push({\n      ...payload,\n      id: id,\n    });\n\n    setIsSearch(false);\n    setTodos(tempTodos);\n    localStorage.setItem(\"todos\", JSON.stringify(tempTodos));\n  };\n\n  const handleUpdateTask = (payload) => {\n    const tempTodos = [...localTodos()];\n    const index = tempTodos.findIndex((todo) => todo.id === payload.id);\n\n    if (index !== -1) {\n      tempTodos[index] = {\n        ...payload,\n      };\n    }\n\n    setIsSearch(false);\n    setTodos(tempTodos);\n    localStorage.setItem(\"todos\", JSON.stringify(tempTodos));\n  };\n\n  const handleDeleteTask = (id) => {\n    const tempTodos = [...localTodos()];\n    const newTodos = tempTodos.filter((todo) => todo.id !== id);\n\n    setIsSearch(false);\n    setTodos(newTodos);\n    localStorage.setItem(\"todos\", JSON.stringify(newTodos));\n  };\n\n  const handleDeleteBulk = (listId) => {\n    let tempTodos = [...localTodos()];\n\n    listId.forEach((id) => {\n      tempTodos = tempTodos.filter(\n        (todo) => todo.id.toString() !== id.toString()\n      );\n    });\n\n    setIsSearch(false);\n    setTodos(tempTodos);\n    localStorage.setItem(\"todos\", JSON.stringify(tempTodos));\n  };\n\n  const handleSortTodos = () => {\n    let tempTodos = [...todos];\n\n    if (!tempTodos.length) return tempTodos;\n\n    return tempTodos.sort(function (a, b) {\n      return new Date(a.due_date) - new Date(b.due_date);\n    });\n  };\n\n  const handleSearch = debounce((value) => {\n    const localTodos = localStorage.getItem(\"todos\");\n    let tempTodos = [...todos];\n\n    setIsSearch(true);\n\n    if (value) {\n      tempTodos = tempTodos.filter((todo) =>\n        todo.name.toLowerCase().includes(value.toLowerCase())\n      );\n      setTodos(tempTodos);\n    } else {\n      setTodos(JSON.parse(localTodos));\n    }\n  }, 500);\n\n  return (\n    <div className=\"page__wrap\">\n      <div className=\"page__content\">\n        <div className=\"page__content--left\">\n          <div className=\"page__content-wrap\">\n            <h3 className=\"text-center\">New Task</h3>\n            <TodoForm onSubmit={handleAddTask} />\n          </div>\n        </div>\n\n        <div className=\"page__content--right\">\n          <div className=\"page__content-wrap\">\n            <h3 className=\"text-center\">ToDo List</h3>\n            <TodoList\n              todos={handleSortTodos()}\n              onDelete={handleDeleteTask}\n              onUpdate={handleUpdateTask}\n              onDeleteBulk={handleDeleteBulk}\n              onSeach={handleSearch}\n              isSearch={isSearch}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './assets/styles/index.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}